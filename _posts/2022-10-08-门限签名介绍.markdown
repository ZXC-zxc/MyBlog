---
layout: post
title:  "门限签名介绍"
date:   2022-10-08 16:09:51 +0800
categories: Threshold
---

&emsp;&emsp;门限签名方案 (*Threshold Signature Scheme* 以下简称TSS) 是用于分布式密钥生成和签名的加密原语。在区块链客户端中使用 TSS 是一种新的思路，这可以为其提供许多好处，特别是在安全性方面。而在更广泛的意义上来说，TSS 可以影响到现有密钥管理系统(例如[加密钱包](https://academy.binance.com/en/articles/crypto-wallet-types-explained))的设计，并在与[DeFi](https://academy.binance.com/en/glossary/defi)应用结合的过程中进行原生化的支持。尽管如此，TSS在现在仍然是一项新技术，因此在使用中还应考虑到实际的风险和局限性。  
&emsp;&emsp;在本文中，我们将介绍 TSS 是什么、它能为区块链领域带来什么样的潜在优化、如何在区块链客户端中实现它、它与 Shamir 秘密共享和 多重签名([Multisig](https://academy.binance.com/en/articles/what-is-a-multisig-wallet)) 的比较、有哪些不同的方式来实现TSS、使用 TSS 进行分布式密钥管理，最后我们将讨论它的风险和限制。

# **密码学的支撑**
&emsp;&emsp;要了解 TSS，我们首先需要了解一些[密码学](https://academy.binance.com/en/glossary/cryptography)的基本知识。自 1970 年代以来，越来越多的互联网安全系统（如 TLS 和 [PGP](https://academy.binance.com/en/articles/what-is-pgp)）开始采用非对称加密技术，也称为公钥加密技术 (*Public Key Cryptography* 以下简称[PKC](https://academy.binance.com/en/articles/what-is-public-key-cryptography))。PKC 使用两个密钥：一个公共密钥（简称公钥）和一个私有密钥（简称私钥）。公钥是公开的，任何人都可以发布和使用，但私钥是一条私密信息，用于保证系统的安全。  
&emsp;&emsp;[加解密](https://academy.binance.com/en/glossary/encryption)和数字签名是 PKC 最常见的两种用法。加解密和数字签名方案都依赖于以下三种算法的集合。首先是公私钥对的生成，其次是密文/签名的生成，而第三是解密/验证过程。关于数字签名，签名算法通过私钥所有者所持有的私钥来产生唯一的签名。而一条信息的数字签名，任何持有其对应公钥的人都可以对其进行所有权和正确性的验证。

# **区块链**
&emsp;&emsp;毫无疑问，区块链是一项非常强大的技术。它提供了一个共识层来组织和记录发生的事件。这样的基础设施为我们，也就是[区块链](https://academy.binance.com/en/glossary/blockchain)的用户提供了建立去中心化经济甚至去中心化政府的潜在技术支撑。令人惊讶的是，运行基本区块链所需的密码学技术是完全基于数字签名的。在区块链的世界中，私钥代表着身份，而签名则是由该身份签署的公开陈述或声明。区块链则根据一组预定的规则对这些声明进行排序并验证，同时，这些规则还会确保这些签名是不可伪造和绝对正确的。  
&emsp;&emsp;与区块链当中所使用的经典密码学相比，现代密码学的工具箱中又增加了一些其他像魔法一样棒的技术：[零知识证明](https://academy.binance.com/en/glossary/zero-knowledge-proofs)、同态加密和多方计算等等。正如我们在过去十年中看到的那样，区块链研究极大地推动了应用密码学的发展，最近更是在上述所有方面都取得了重大突破。  
&emsp;&emsp;在本文中，我们将关注其中的一个方面：高效而安全的门限签名 (TSS)。  

# **多方计算与门限签名方案**

&emsp;&emsp;多方计算 (*Multi-Party Computation* 以下简称MPC) 是密码学的一个分支，大约开始于40 年前， 是Andrew C. Yao(姚期智) 的一项开创性研究。在 MPC 中，一组互不信任的参于方尝试在他们的输入数据上共同计算一个函数，而又不泄漏这些数据给对方。  
&emsp;&emsp;举个例子，假设一家公司的 n 名员工想知道谁的薪水最高，但又不想向对方透露他们的实际薪水。在这个例子中每个员工的私人输入是薪水，输出将是薪水最高的员工的姓名。在使用 MPC 进行此计算时，整个计算过程中都不会泄漏任何员工的具体薪水。  
&emsp;&emsp;MPC 的两个主要属性是正确性和隐私性：
* 正确性：算法产生的输出是正确的（和预期的一样）。
* 隐私性：一方持有的私密输入数据不会泄露给另一方。  
   
&emsp;&emsp;我们将使用 MPC 以分布式的方式计算数字签名。让我们看看如何将上述属性应用于签名。上文中提到，对于签名，我们有三个步骤：
* 密钥生成过程：这是第一步也是最复杂的。我们需要生成一个公开的密钥，用于验证未来的签名。但是，我们还需要为每一个参与方都生成一个单独的密钥，我们称之为秘密份额(*secret share*)。就正确性和隐私性而言，我们要求密钥生成函数向各参于方输出相同的公钥，并为每一方单独输出不同的秘密份额，这样就保证了：（1）隐私：各方之间不会泄露秘密份额数据，以及（2）正确性：公钥和所有的秘密份额之间是函数相关的。
* 签名过程：此步骤涉及签名生成函数。每一方的输入是其所持有的秘密份额，也就是上一步（分布式密钥生成）创建的输出。另一个输入就是所有参与方均知道的公共输入，也就是要签名的消息。输出将是一个数字签名，隐私属性确保在计算过程中不会发生秘密份额的泄露。
* 验签过程：验签算法与传统的验签算法保持一致。为了与单密钥签名兼容，每个知道公钥的人都应该能够正确的验证签名。这也正是区块链验证[节点](https://academy.binance.com/en/articles/what-are-nodes)所做的事情。  

门签名方案 (TSS) 是我们为分布式密钥生成 (DKG) 和分布式阈值签名方案所组合在一起而起的名称。

# **将TSS与区块链的结合**
&emsp;&emsp;在区块链领域中使用 TSS 最天然的方式是更改区块链客户端以使用 TSS 生成密钥和签名。在这里，我们使用术语*区块链客户端*来指代由全[节点](https://academy.binance.com/en/articles/what-are-nodes)所执行的命令集。在实际使用中，TSS 技术允许我们用分布式计算来替换所有与私钥相关的命令。  
&emsp;&emsp;为了更详细地解释这一过程，我们先简要的描述一下如何在传统区块链上创建新地址。简单地说，我们可以通过生成一个私钥来创建一个新地址，我们先从私钥中计算出公钥。然后，再从公钥中派生出区块链地址。  
&emsp;&emsp;当使用 TSS时，我们将通过一组 n 个参与方所持有私钥的秘密份额（个人份额不会透露给其他方）来计算公钥。再从公钥中，以与现有相同的方式推导出地址，从而使区块链系统并不知晓地址的具体生成方式。这样做的优点是私钥不再是单点故障，因为每一个参与方只持有它的一部分。  
&emsp;&emsp;当然，签署交易时也是这样做的。在签名时，我们不是使用参与方的私钥进行单方签名，而是在多方之间进行分布式签名来生成最终的交易签名。因此，只要有达到了阈值的人在诚实的进行签名，每一方就都可以产生有效的签名。这样，我们就再次从本地计算（单点故障）升级为了交互式计算。  
&emsp;&emsp;值得一提的是，分布式密钥的生成可以允许设置不同样式的访问结构(*access structures*)：比如一般的“t out of n”式的结构设置是指在私钥相关操作中，即使有 t 次的失败，也不会影响到整体的安全性。

# **TSS vs. 多重签名**
&emsp;&emsp;一些区块链系统提供了 TSS 相关的功能来作为系统的内置功能，或者是作为系统中一些可编程的部分。我们将此功能称为多重签名(以下称*multisig* or [*multi-signature*](https://academy.binance.com/en/articles/what-is-a-multisig-wallet))。为了更好地理解这些差异，我们可以将multisig视为区块链应用层中的 TSS。  
&emsp;&emsp;虽然，multisig 和 TSS 本质上都在试图实现相似的目标，但 TSS 是在链下使用密码学来完成的，而 multisig 则发生在链上。在链上，区块链需要一种编码multisig的方法，这可能会损害到签名的隐私性，因为访问结构（签名者的数量）会暴露在区块链上。而且，multisig交易的成本也更高，因为不同签名者的信息也需要在区块链上进行相互交流。  
&emsp;&emsp;在 TSS 中，签名者的详细信息被隐藏到一个常规的交易中，从而降低了成本并维护了隐私。但另一方面，multisig是非交互式的，这样就省去了在不同签名者之间进行复杂通信的麻烦。  
&emsp;&emsp;两者主要的区别在于multisig是基于特定于区块链的，每个区块链系统都需要进行重新实现，而在某些情况下，则根本就不受支持。相反，TSS 单纯的依赖于密码学，因此始终都可以进行使用。在[此处](https://medium.com/zengo/threshold-signatures-private-key-the-next-generation-f27b30793b)有一篇很棒的文章，其中包含了一些插图来描述他们的差异。  

# **TSS vs. 沙米尔秘密共享方案**

沙米尔秘密共享方案 (*Shamir secret sharing scheme* 简称SSSS) 提供了一种以分布式的方式来存储私钥的方案，当私钥处于静止状态时，它会存储在多个位置。 SSSS 和 TSS 有两个主要区别：

* 密钥生成：在 SSSS 中，有一个秘密拥有者，被称为经销商(dealer)。他负责生成私钥秘密份额。这意味着在生成密钥时，私钥在单个位置生成，然后由经销商分发到不同的位置。在 TSS 中，没有经销商这个角色，因为它的角色是分布的，因此完整的私钥永远不会出现在一个单一的位置。
* 交易签名：在 SSSS 中，各参与方必须重建完整的私钥才能签名，这再次导致每次需要签名时都会出现单点故障。而在 TSS 中，签名以分布式方式完成，无需重建私钥。  

由此我们可以看到，在 TSS 中，私钥（代表着系统的安全性）在其整个生命周期中从未位于某个单一位置。

# **门限钱包**

&emsp;&emsp;基于 TSS 技术的钱包与传统的[加密货币钱包](https://academy.binance.com/en/articles/crypto-wallet-types-explained)有点不同。通常，传统钱包会生成一个助记词并使用它来确定性地导出地址。用户稍后可以使用这种分层确定性 (*hierarchical deterministic* 简称HD) 结构来 1) 获取与钱包地址对应的私钥并与它们签署交易，以及 2) 使用助记词恢复所有钱包密钥。  
&emsp;&emsp;在门限钱包中，事情要更加复杂一些。尽管钱包也可以采用HD 结构，但它需要设计另一种MPC协议，以分布式的方式来计算生成。各方需要共同来决定下一个要使用的密钥是什么。换句话说，每一方都有自己的助记词。助记词都是单独生成的，从不组合，因此单独的一方无法从其种子中导出私钥。  
&emsp;&emsp;基于 TSS 的钱包还有一个很好的安全特性，即在不改变相应的公钥和区块链地址的前提下启用私钥轮换。私钥轮换，也称为主动秘密共享，它是另一种 MPC 协议，它将秘密份额作为输入，并输出一组新的秘密份额。旧的秘密份额可以被删除，新的秘密份额可以以同样的方式继续使用。  
&emsp;&emsp;这种特性为安全性增加了额外的时间维度的保护，这意味着攻击者必须同时在多个位置发起攻击才能攻击门限钱包。如果攻击者想要伪造签名，在轮换之前和轮换之后分别窃取到的秘密份额即使放在一起使用，也不会对攻击钱包有任何帮助。  
&emsp;&emsp;TSS钱包存在一个缺点，那就是缺少助记词以使其与单密钥钱包进行兼容。因此，哪些参与方将持有秘密份额将是一个需要慎重考虑的问题。  

这有几种可能的架构：
* 外包 TSS：钱包用户使用另外“n”个服务器来替代他们进行运算。有效地将密钥生成、管理和签名，外包给不是资产所有者的计算服务提供商。而这些提供商会提供一个安全层来换取某种激励收益。
* 使用多个设备：钱包用户将在他们拥有的设备之间运行 TSS。例如，一方是一些物联网设备，另一方是用户移动设备，再另一方是他们的笔记本电脑，等等。
* 混合模式：TSS 的一些参与方由外部服务提供商控制，而一些参与方在用户拥有的设备上运行。  


第一种方法把繁重的 TSS 计算从用户的客户端移除。但另一方面，服务提供商可以串通（我们假设他们中的足够多的人没有同时受到攻击，但实际上他们可能会）并窃取用户的资产。 

第二种方法为用户提供了完全控制权，但由于用户需要多个设备上网并参与 TSS 计算，因此进行交易会很麻烦。
  
第三种方法被认为是两全其美的选择，因为它为用户提供了一种简单快捷的方式来进行交易，同时又不在未经用户授权的情况下完成交易。  

# **TSS与智能合约**

&emsp;&emsp;多年来，研究人员发现了数字签名的许多用途，其中一些用途非常的另人惊讶。如前所述，TSS 是一种可以大大提高安全性的密码原语。在区块链的世界中，我们认为许多功能可以用基于 TSS 的密码学来代替。去中心化应用程序、[layer 2](https://academy.binance.com/en/glossary/layer-2)扩展解决方案、原子交换([*atomic swaps*](https://academy.binance.com/en/articles/atomic-swaps-explained))、混合、继承等等都可以构建在 TSS 框架之上。这最终将导致现行昂贵且有风险的链上智能合约操作被更便宜、更可靠的方案所代。  
&emsp;&emsp;举一些具体的例子：[*Multi-Hop Locks*](https://github.com/KZen-networks/multi-hop-locks)巧妙地利用了两方签名，可以作为比特币闪电网络的替代品，它具有一个更安全也更私密的支付通道网络。基于单个门限签名验证的[*ShareLock*](https://github.com/KZen-networks/ShareLock) ，可能是以太坊最便宜的链上混合解决方案。

# **存在的风险**
&emsp;&emsp;在过去的几年中，TSS 的落地应用显着增加。但是，作为一项相对较新的技术，它仍然存在一些局限性和担忧。与经典的PKC相比，TSS 协议可能非常复杂，并且尚未经过“实战检测”。通常，与简单的数字签名相比，TSS 需要额外的、更弱的密码学假设(*cryptographic assumptions*)。也因此，现在发现了传统环境中不存在的加密攻击向量(*cryptographic attack vectors*)（请参阅 Breaking Bitcoin Conference 2019 的此[文章](https://zengo.com/wp-content/uploads/2019/06/breaking_bitcoin19_updated.pdf)）。安全工程师和应用密码学家可以协助在您的系统中安全地部署 TSS。

# **最后一点想法**
&emsp;&emsp;在本文中，我们介绍了门限签名方案 (TSS) 的基础知识，这是一种令人着迷的密码学原语，有可能显著的改变我们使用区块链的方式。  
&emsp;&emsp;由于本文没有讨论可用于币安链和比特币的门限 ECDSA，有兴趣的可以参考以下近期论文列表。另外，如果你想尝试一些 TSS 实现，你可以在[这里](https://github.com/KZen-networks/binance-thresh-wallet)找到两方参与的币安链钱包的代码，或者试试 [ZenGo 钱包](https://www.zengo.com/)，它利用混合方法提供了一个非托管的两方参与的币安链钱包。

扩展阅读：
* [Fast Secure Two-Party ECDSA Signing](https://eprint.iacr.org/2017/552)
* [Fast Secure Multiparty ECDSA with Practical Distributed Key Generation and Applications to Cryptocurrency Custody](https://eprint.iacr.org/2018/987.pdf)
* [Two-Party ECDSA from Hash Proof Systems and Efficient Instantiations](https://eprint.iacr.org/2019/503.pdf)
* [Fast Multiparty Threshold ECDSA with Fast Trustless Setup](https://eprint.iacr.org/2019/114.pdf)
* [Secure Two-party Threshold ECDSA from ECDSA Assumptions](https://eprint.iacr.org/2018/499.pdf)
* [Threshold ECDSA from ECDSA Assumptions: The Multiparty Case](https://eprint.iacr.org/2019/523.pdf)


本文翻译自：
https://academy.binance.com/en/articles/threshold-signatures-explained
  